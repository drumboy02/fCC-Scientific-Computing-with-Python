** start of main.py **

import copy
import random

class Hat:
    def __init__(self, **kwargs):
        items = kwargs.items()
        self.contents = [k for k, v in items for _ in range(v)]

    def draw(self, n_balls):
        h_balls = self.contents
        res = []

        if n_balls > len(h_balls):
            for i in range(len(h_balls)):
                r = random.randrange(len(h_balls))
                res.append(h_balls[r])
                del h_balls[r]

            return res

        for i in range(n_balls):
            r = random.randrange(len(h_balls))
            res.append(h_balls[r])
            del h_balls[r]

        return res

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    N = num_experiments
    M = 0

    # print('hat:', hat.contents)
    print('expected_balls:', expected_balls)
    print('num_balls_drawn:', num_balls_drawn)
    print('N:', N)

    for exp in range(N):
        cp = copy.deepcopy(hat)
        d_balls = cp.draw(num_balls_drawn)
        success = 0
        items = expected_balls.items()
        # print(f'experiment #{exp + 1}:\n {d_balls}')

        for k, v in items:
            if d_balls.count(k) >= v:
                success += 1
            else:
                success = False
        if success == len(items):
            M += 1 
    
    print('M/N:', M/N)
    return M/N

hat = Hat(black=6, red=4, green=3)
probability = experiment(hat=hat,
                  expected_balls={'red':2,'green':1},
                  num_balls_drawn=5,
                  num_experiments=2000)


** end of main.py **

